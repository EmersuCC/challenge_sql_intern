CREATE TABLE IF NOT EXISTS CLIENTE (
	ID_CLIENTE SERIAL PRIMARY KEY,
	NOME VARCHAR ( 50 ) NOT NULL,
	IDADE INTEGER NOT NULL,
	STATUS_BLOQUEIO CHAR(1) NOT NULL DEFAULT 'A',
	LIMITE_CREDITO DECIMAL(10, 2) NOT NULL
);

CREATE TABLE IF NOT EXISTS FATURA (
	ID_FATURA SERIAL PRIMARY KEY,
	DATA_VENCIMENTO DATE NOT NULL,
	VALOR DECIMAL(10, 2) NOT NULL,
	STATUS CHAR(1) NOT NULL,
	ID_CLIENTE INTEGER REFERENCES CLIENTE(ID_CLIENTE)
);

CREATE TABLE IF NOT EXISTS PAGAMENTO (
	ID_PAGAMENTO SERIAL PRIMARY KEY,
	DATA_PAGAMENTO DATE,
	VALOR DECIMAL(10, 2),
	ID_FATURA INTEGER REFERENCES FATURA(ID_FATURA)
);

-- View para verificar clientes com idade entre 18 e 21 anos que possuem limite de crédito maior ou igual a 1000 reais.


CREATE OR REPLACE VIEW V_CLIENTE_LIM_BE_1000 AS
	SELECT
		COUNT(*) AS CLIENTE_1K_18_21
	FROM
		CLIENTE
	WHERE
		(IDADE BETWEEN 18
		AND 21)
		AND LIMITE_CREDITO >= 1000
		AND STATUS_BLOQUEIO = 'A';

-- View para verificar clientes que realizaram pagamento no dia do vencimento da Fatura.

CREATE OR REPLACE VIEW V_PAGAMENTO_DIA_VENCIMENTO AS
	SELECT
		F.DATA_VENCIMENTO,
		COUNT(*) AS QUANTIDADE
	FROM
		FATURA    F
		JOIN PAGAMENTO P
		ON F.ID_FATURA = P.ID_FATURA
	WHERE
		F.DATA_VENCIMENTO = P.DATA_PAGAMENTO
	GROUP BY
		F.DATA_VENCIMENTO;

-- View para verificar clientes que realizaram pagamento no dia anterior ao vencimento da Fatura.

CREATE OR REPLACE VIEW V_PAGAMENTOS_DIA_ANTERIOR AS
	SELECT
		C.ID_CLIENTE,
		F.VALOR,
		P.DATA_PAGAMENTO
	FROM
		CLIENTE   C
		JOIN FATURA F
		ON C.ID_CLIENTE = F.ID_CLIENTE JOIN PAGAMENTO P
		ON F.ID_FATURA = P.ID_FATURA
	WHERE
		P.DATA_PAGAMENTO = F.DATA_VENCIMENTO - INTERVAL '1 DAY';

-- View para verificar clientes que possuem faturas em atraso.

CREATE OR REPLACE VIEW V_CLIENTE_EM_ATRASO AS
	SELECT
		C.ID_CLIENTE,
		C.NOME,
		F.VALOR,
		F.DATA_VENCIMENTO,
		CASE F.STATUS
			WHEN 'P' THEN
				'Pago'
			WHEN 'A' THEN
				'Atraso'
		END                 AS STATUS,
		EXTRACT(DAY
	FROM
		AGE(NOW(),
		F.DATA_VENCIMENTO)) AS DIAS_EM_ATRASO
	FROM
		CLIENTE   C
		JOIN FATURA F
		ON C.ID_CLIENTE = F.ID_CLIENTE LEFT JOIN PAGAMENTO P
		ON F.ID_FATURA = P.ID_FATURA
	WHERE
		F.STATUS IN ('A',
		'P')
		AND (P.DATA_PAGAMENTO IS NULL
		OR P.DATA_PAGAMENTO > F.DATA_VENCIMENTO)
	ORDER BY



-- View para listar os clientes que estão com faturas em atraso há mais de 3 dias

CREATE OR REPLACE VIEW V_ATRASO_PAGAMENTO_3DIAS AS
    SELECT
        C.ID_CLIENTE,
        C.NOME,
        CASE
            WHEN EXTRACT(DAY FROM AGE(NOW(), F.DATA_VENCIMENTO)) > 3 THEN
                'Bloqueado'
            ELSE
                'Ativo'
        END                 AS STATUS_BLOQUEIO,
        F.ID_FATURA,
        F.VALOR,
        EXTRACT(DAY
    FROM
        AGE(NOW(),
        F.DATA_VENCIMENTO)) AS DIAS_EM_ATRASO
    FROM
        CLIENTE   C
        JOIN FATURA F
        ON C.ID_CLIENTE = F.ID_CLIENTE LEFT JOIN PAGAMENTO P
        ON F.ID_FATURA = P.ID_FATURA
    WHERE
        F.STATUS = 'A'
        AND (P.DATA_PAGAMENTO IS NULL
        OR P.DATA_PAGAMENTO > F.DATA_VENCIMENTO)
    ORDER BY
        DIAS_EM_ATRASO

SELECT * FROM V_ATRASO_PAGAMENTO_3DIAS;
SELECT * FROM V_PAGAMENTO_DIA_VENCIMENTO;
SELECT * FROM V_PAGAMENTOS_DIA_ANTERIOR;
SELECT * FROM V_CLIENTE_LIM_GE_1000;
SELECT * FROM V_CLIENTE_EM_ATRASO;